<!-- $Id$ -->

<configure
   xmlns="http://namespaces.zope.org/zope"
   i18n_domain="zope"
   >

  <!-- security definitions -->

  <!-- event subscribers -->

  <subscriber
        for=".interfaces.ITargetRelation
             cybertools.relation.interfaces.IRelationInvalidatedEvent"
        handler=".util.removeTargetRelation"
        />

  <!-- loops top-level container -->

  <interface interface=".interfaces.ILoops"
             type="zope.app.content.interfaces.IContentType" />

  <content class=".Loops">

    <implements
       interface="zope.app.annotation.interfaces.IAttributeAnnotatable" />

    <factory id="loops.Loops"
             description="loops top-level container" />

    <allow
        attributes="getSiteManager" />
    
    <require
        permission="zope.ManageServices"
        attributes="setSiteManager" />
        
    <require
        permission="zope.View"
        interface="zope.app.container.interfaces.IReadContainer" />

    <require
        permission="zope.ManageContent"
        interface="zope.app.container.interfaces.IWriteContainer" />

    <!--<require
        permission="zope.View"
        interface="loops.interfaces.ILoops" />-->
    
    <require
        permission="zope.View"
        attributes="getLoopsUri loopsTraverse getConceptManager
                    getResourceManager getViewManager skinName" />

    <require
        permission="zope.ManageContent"
        set_schema=".interfaces.ILoops" />

  </content>

  <!-- concept manager and concept -->

  <interface interface=".interfaces.IConceptManager"
             type="zope.app.content.interfaces.IContentType" />

  <content class=".concept.ConceptManager">

    <factory id="loops.ConceptManager"
             description="Concept manager" />

    <require
        permission="zope.View"
        interface="zope.app.container.interfaces.IReadContainer" />

    <require
        permission="zope.ManageContent"
        interface="zope.app.container.interfaces.IWriteContainer" />

    <require
        permission="zope.View"
        attributes="getTypePredicate getDefaultPredicate getTypeConcept" />
  
  </content>

  <interface
      interface=".interfaces.IConcept"
      type="zope.app.content.interfaces.IContentType" />

  <content class=".concept.Concept">

    <implements
       interface="zope.app.annotation.interfaces.IAttributeAnnotatable" />

    <factory
        id="loops.Concept"
        description="Concept object" />

    <require
        permission="zope.View"
        interface=".interfaces.IConcept" />

    <require
        permission="zope.ManageContent"
        set_schema=".interfaces.IConcept" />

  </content>

  <!-- resource manager and resource -->

  <interface interface=".interfaces.IResourceManager"
             type="zope.app.content.interfaces.IContentType" />

  <content class=".resource.ResourceManager">

    <factory id="loops.ResourceManager"
             description="Resource manager" />

    <require
        permission="zope.View"
        interface="zope.app.container.interfaces.IReadContainer" />

    <require
        permission="zope.ManageContent"
        interface="zope.app.container.interfaces.IWriteContainer" />

  </content>

  <interface
      interface=".interfaces.IDocument"
      type="zope.app.content.interfaces.IContentType" />

  <content class=".resource.Document">

    <implements
       interface="zope.app.annotation.interfaces.IAttributeAnnotatable" />

    <factory
        id="loops.Document"
        description="Document" />

    <require
        permission="zope.View"
        interface=".interfaces.IDocument
                   .interfaces.IFileSystemResource
                   .interfaces.IControlledResource
                   zope.app.size.interfaces.ISized" />

    <require
        permission="zope.ManageContent"
        set_schema=".interfaces.IDocument" />

    <require
        permission="zope.ManageApplication"
        set_schema=".interfaces.IFileSystemResource
                    .interfaces.IControlledResource" />

  </content>

  <interface
      interface=".interfaces.IMediaAsset"
      type="zope.app.content.interfaces.IContentType" />

  <content class=".resource.MediaAsset">

    <implements
       interface="zope.app.annotation.interfaces.IAttributeAnnotatable" />

    <factory
        id="loops.MediaAsset"
        description="Media Asset" />

    <require
        permission="zope.View"
        interface=".interfaces.IMediaAsset" />

    <require
        permission="zope.ManageContent"
        set_schema=".interfaces.IMediaAsset" />

  </content>

  <!--<adapter
      factory="zope.app.file.image.ImageSized"
      provides="zope.app.size.interfaces.ISized"
      for=".interfaces.IMediaAsset"
      />-->

  <!-- view manager and view -->

  <interface interface=".interfaces.IViewManager"
             type="zope.app.content.interfaces.IContentType" />

  <content class=".view.ViewManager">

    <factory id="loops.ViewManager"
             description="View manager" />

    <require
        permission="zope.View"
        interface="zope.app.container.interfaces.IReadContainer" />

    <require
        permission="zope.ManageContent"
        interface="zope.app.container.interfaces.IWriteContainer"
        attributes="updateOrder" />

  </content>

  <interface
      interface=".interfaces.INode"
      type="zope.app.content.interfaces.IContentType" />

  <content class=".view.Node">

    <!--<implements
       interface="loops.interfaces.ILoopsObject" />-->

    <implements
       interface="zope.app.annotation.interfaces.IAttributeAnnotatable" />

    <factory
        id="loops.Node"
        description="Node" />

    <require
        permission="zope.View"
        interface=".interfaces.INode" />

    <require
        permission="zope.ManageContent"
        set_schema=".interfaces.INode" />

    <!--<require
        permission="zope.View"
        interface="zope.app.container.interfaces.IReadContainer" />-->

  </content>

  <!-- adapters -->

  <adapter factory="loops.common.LoopsDCAdapter"
           for="loops.interfaces.INode"
           provides="zope.app.dublincore.interfaces.IZopeDublinCore"
           trusted="True" />
  
  <adapter factory="loops.common.LoopsDCAdapter"
           for="loops.interfaces.IConcept"
           provides="zope.app.dublincore.interfaces.IZopeDublinCore"
           trusted="True" />
  
  <adapter factory="loops.common.LoopsDCAdapter"
           for="loops.interfaces.IDocument"
           provides="zope.app.dublincore.interfaces.IZopeDublinCore"
           trusted="True" />
  
  <adapter factory="loops.common.LoopsDCAdapter"
           for="loops.interfaces.IMediaAsset"
           provides="zope.app.dublincore.interfaces.IZopeDublinCore"
           trusted="True" />
  
  <class class="loops.common.LoopsDCAdapter">
    <require like_class="zope.app.dublincore.annotatableadapter.ZDCAnnotatableAdapter" />
  </class>

  <adapter factory="loops.concept.IndexAttributes" />
  <adapter factory="loops.resource.IndexAttributes" />
  <adapter factory="loops.resource.IndexableResource" />
  
  <adapter factory="loops.resource.DocumentReadFileAdapter" />
  <adapter factory="loops.resource.DocumentWriteFileAdapter" />
  
  <adapter factory="loops.type.ConceptType" />
  <adapter factory="loops.type.ResourceType" />
  <adapter factory="loops.type.LoopsTypeManager" />
  
  <adapter factory="loops.type.TypeConcept" />
  
  <adapter factory="loops.query.QueryConcept" trusted="True" />
  <class class="loops.query.QueryConcept">
    <require permission="zope.View"
             interface="loops.query.IQueryConcept" />
    <require permission="zope.ManageContent"
             set_schema="loops.query.IQueryConcept" />
  </class>

  
  <adapter factory="loops.external.NodesLoader" />
  <adapter factory="loops.external.NodesExporter" />
  <adapter factory="loops.external.NodesImporter" />

  <adapter factory="loops.target.DocumentProxy"
           permission="zope.ManageContent" />
  <adapter factory="loops.target.MediaAssetProxy"
           permission="zope.ManageContent" />
  <adapter factory="loops.target.ConceptProxy"
           permission="zope.ManageContent" />

  <vocabulary
      factory="loops.concept.ConceptTypeSourceList"
      name="loops.conceptTypeSource"
      />

  <vocabulary
      factory="loops.type.TypeInterfaceSourceList"
      name="loops.TypeInterfaceSource"
      />

  <vocabulary
      factory="loops.concept.PredicateSourceList"
      name="loops.PredicateSource"
      />

  <include package=".knowledge" />
  <include package=".organize" />
  <include package=".browser" />

</configure>
